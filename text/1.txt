import tensorflow as tf
import matplotlib.pyplot as plt
print("TensorFlow version:", tf.__version__)

mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()

plt.imshow(x_train[0], cmap='gray')
plt.title(f"Label: {y_train[0]}")  # Display the corresponding label
plt.show()

x_train, x_test = x_train / 255.0, x_test / 255.0
plt.imshow(x_train[5], cmap='gray')

model = tf.keras.models.Sequential([

  tf.keras.layers.Flatten(input_shape=(28, 28)),

  tf.keras.layers.Dense(128, activation='relu'),

  tf.keras.layers.Dropout(0.2),

  tf.keras.layers.Dense(10)
])

predictions = model(x_train[:1]).numpy()
predictions

tf.nn.softmax(predictions).numpy()

loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)
loss_fn(y_train[:1], predictions).numpy()

model.compile(optimizer='adam',
              loss=loss_fn,
              metrics=['accuracy'])
history=model.fit(x_train, y_train, epochs=5)
acc = history.history['accuracy']
val_acc = history.history['loss']
plt.plot(range(1,len(acc)+1),acc,label='Training accuracy')
plt.plot(range(1,len(val_acc)+1),val_acc,label='Loss')
plt.plot()

train_acc = history.history

model.evaluate(x_test,  y_test, verbose=2)

probability_model = tf.keras.Sequential([
  model,tf.keras.layers.Softmax()
])
probability_model(x_test[:5])
