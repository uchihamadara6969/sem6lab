import os

os.environ["KERAS_BACKEND"] = "tensorflow"

import keras
import numpy as np
import tensorflow as tf
import cv2
from keras.applications import vgg19


base_image_path = cv2.imread("/content/F28w3Ac.jpeg")
#base_image_path = keras.utils.get_file("paris.jpg", "/content/F28w3Ac.jpeg")
style_reference_image_path = cv2.imread("/content/Style.jpeg")
result_prefix = "paris_generated"

# Weights of the different loss components
total_variation_weight = 1e-6
#Style loss measures the difference in style between the generated image and the reference style image.
style_weight = 1e-6
#ensures that the generated image retains the content of the input image.
#A higher weight prioritizes preserving content, while a lower weight reduces its impact.
content_weight = 2.5e-8

# Dimensions of the generated picture.
width, height, channels = base_image_path.shape
img_nrows = 400
img_ncols = int(width * img_nrows / height)
base_image_path = cv2.cvtColor(base_image_path, cv2.COLOR_BGR2RGB)

from matplotlib import pyplot as plt
plt.imshow(base_image_path)

plt.imshow(style_reference_image_path)

"""**Image preprocessing / deprocessing utilities**

"""

def preprocess_image(image_path):
    # Util function to open, resize and format pictures into appropriate tensors
    img = keras.utils.load_img(image_path, target_size=(img_nrows, img_ncols))
    img = keras.utils.img_to_array(img)
    img = np.expand_dims(img, axis=0)
    img = vgg19.preprocess_input(img)
    return tf.convert_to_tensor(img)


def deprocess_image(x):
    # Util function to convert a tensor into a valid image
    x = x.reshape((img_nrows, img_ncols, 3))
    # Remove zero-center by mean pixel
    x[:, :, 0] += 103.939
    x[:, :, 1] += 116.779
    x[:, :, 2] += 123.68
    # 'BGR'->'RGB'
    x = x[:, :, ::-1]
    x = np.clip(x, 0, 255).astype("uint8")
    return x

"""**Compute the style transfer loss**

"""

# The gram matrix of an image tensor (feature-wise outer product)
#Gram matrix is commonly used in style transfer tasks to capture the style information of a feature map.

def gram_matrix(x):
  # rearranges the dimensions such that the channel dimension becomes the first dimension
    x = tf.transpose(x, (2, 0, 1))
    #Reshapes the transposed tensor into a 2D matrix
    features = tf.reshape(x, (tf.shape(x)[0], -1))
    #Computes the Gram matrix by taking the matrix multiplication
    gram = tf.matmul(features, tf.transpose(features))
    return gram


# The "style loss" is designed to maintain
# the style of the reference image in the generated image.
# It is based on the gram matrices (which capture style) of
# feature maps from the style reference image
# and from the generated image

#calculates the style loss between a style image and a combination image.
def style_loss(style, combination):
    S = gram_matrix(style)
    C = gram_matrix(combination)
    channels = 3
    size = img_nrows * img_ncols
    return tf.reduce_sum(tf.square(S - C)) / (4.0 * (channels**2) * (size**2))


# An auxiliary loss function
# designed to maintain the "content" of the
# base image in the generated image
#calculates the content loss between a base image and a combination image

def content_loss(base, combination):
    return tf.reduce_sum(tf.square(combination - base))


# The 3rd loss function, total variation loss,
# designed to keep the generated image locally coherent

#calculates the total variation loss for an image x
def total_variation_loss(x):
    a = tf.square(
        x[:, : img_nrows - 1, : img_ncols - 1, :] - x[:, 1:, : img_ncols - 1, :]
    )
    b = tf.square(
        x[:, : img_nrows - 1, : img_ncols - 1, :] - x[:, : img_nrows - 1, 1:, :]
    )
    return tf.reduce_sum(tf.pow(a + b, 1.25))

# Build a VGG19 model loaded with pre-trained ImageNet weights
model = vgg19.VGG19(weights="imagenet", include_top=False)

# Get the symbolic outputs of each "key" layer (we gave them unique names).
#keys are the names of each layer in the VGG19 model, and the values are the corresponding
#outputs of those layers
outputs_dict = dict([(layer.name, layer.output) for layer in model.layers])

# Set up a model that returns the activation values for every layer in
# VGG19 (as a dict).
# takes the same input as the original VGG19 model (specified by inputs=model.inputs) and
#outputs the feature maps of all the layers specified in outputs_dict
feature_extractor = keras.Model(inputs=model.inputs, outputs=outputs_dict)

# List of layers to use for the style loss.
style_layer_names = [
    "block1_conv1",
    "block2_conv1",
    "block3_conv1",
    "block4_conv1",
    "block5_conv1",
]
# The layer to use for the content loss.
content_layer_name = "block5_conv2"

#composed of three components: content loss, style loss, and total variation loss
def compute_loss(combination_image, base_image, style_reference_image):
    #creates a single tensor containing all three images to be fed into the feature
    #extractor model.
    input_tensor = tf.concat(
        [base_image, style_reference_image, combination_image], axis=0
    )
    features = feature_extractor(input_tensor)

    # Initialize the loss
    loss = tf.zeros(shape=())

    # Add content loss
    # content loss measures how well the content of the combination
    #image matches that of the base image.
    layer_features = features[content_layer_name]
    base_image_features = layer_features[0, :, :, :]
    combination_features = layer_features[2, :, :, :]
    loss = loss + content_weight * content_loss(
        base_image_features, combination_features
    )
    # Add style loss
    # measures how well the style of the combination image matches that
    #of the style reference image.
    for layer_name in style_layer_names:
        layer_features = features[layer_name]
        style_reference_features = layer_features[1, :, :, :]
        combination_features = layer_features[2, :, :, :]
        sl = style_loss(style_reference_features, combination_features)
        loss += (style_weight / len(style_layer_names)) * sl

    # Add total variation loss
    #encourages smoothness and reduces high-frequency artifacts in the generated images
    loss += total_variation_weight * total_variation_loss(combination_image)
    return loss

"""**Add a tf.function decorator to loss & gradient computation**"""

@tf.function
def compute_loss_and_grads(combination_image, base_image, style_reference_image):
    with tf.GradientTape() as tape:
        loss = compute_loss(combination_image, base_image, style_reference_image)
    grads = tape.gradient(loss, combination_image)
    return loss, grads

"""**The training loop**"""

optimizer = keras.optimizers.SGD(
    keras.optimizers.schedules.ExponentialDecay(
        initial_learning_rate=100.0, decay_steps=100, decay_rate=0.96
    )
)

base_image = preprocess_image("/content/F28w3Ac.jpeg")
style_reference_image = preprocess_image("/content/Style.jpeg")
combination_image = tf.Variable(preprocess_image("/content/F28w3Ac.jpeg"))

iterations = 150
for i in range(1, iterations + 1):
    loss, grads = compute_loss_and_grads(
        combination_image, base_image, style_reference_image
    )
    optimizer.apply_gradients([(grads, combination_image)])
    if i % 100 == 0:
        print("Iteration %d: loss=%.2f" % (i, loss))
        img = deprocess_image(combination_image.numpy())
        fname = result_prefix + "_at_iteration_%d.png" % i
        keras.utils.save_img(fname, img)

from IPython.display import Image
Image(filename=result_prefix + "_at_iteration_100.png")
#display(Image(result_prefix + "_at_iteration_150.png"))
